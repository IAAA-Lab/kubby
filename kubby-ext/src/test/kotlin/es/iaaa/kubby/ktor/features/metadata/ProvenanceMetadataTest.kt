package es.iaaa.kubby.ktor.features.metadata

import es.iaaa.kubby.config.ProjectDescription
import es.iaaa.kubby.rdf.ask
import es.iaaa.kubby.rest.api.ContentContext
import io.mockk.every
import io.mockk.mockk
import org.apache.jena.rdf.model.Model
import org.apache.jena.rdf.model.ModelFactory
import java.util.*
import kotlin.test.BeforeTest
import kotlin.test.Test
import kotlin.test.assertTrue

class ProvenanceMetadataTest {

    private lateinit var model: Model
    private lateinit var context: ContentContext
    private lateinit var project: ProjectDescription

    @BeforeTest
    fun before() {
        model = ModelFactory.createDefaultModel()
        context = mockk()
        project = mockk()

        every { context.time } returns GregorianCalendar.getInstance()
        every { context.pageUri } returns "http://localhost/document"
        every { project.softwareName } returns "software"
    }

    @Test
    fun `the document was generated by software in an activity`() {
        ProvenanceMetadata().process(model, context, project)

        val query = """
            PREFIX prov: <http://www.w3.org/ns/prov#>
            PREFIX local: <http://localhost/>
            ASK
            {
                ?x a prov:Activity .
                ?x prov:generated local:document .
                ?x prov:wasAssociatedWith [ a prov:SoftwareAgent ] .
            }
        """.trimIndent()
        assertTrue(model ask query)
    }

    @Test
    fun `the software agent has a name`() {
        ProvenanceMetadata().process(model, context, project)

        val query = """
            PREFIX prov: <http://www.w3.org/ns/prov#>
            PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
            ASK
            {
                ?x a prov:SoftwareAgent .
                ?x rdfs:label "software"
            }
        """.trimIndent()
        assertTrue(model ask query)
    }

    @Test
    fun `the document is an entity generated by an activity in a date`() {
        ProvenanceMetadata().process(model, context, project)

        val query = """
            PREFIX prov: <http://www.w3.org/ns/prov#>
            PREFIX local: <http://localhost/>
            PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
            ASK
            {
                local:document a prov:Entity .
                local:document prov:wasGeneratedBy [ a prov:Activity ] .
                local:document prov:generatedAtTime ?z . FILTER (datatype(?z) = xsd:dateTime )
            }
        """.trimIndent()
        assertTrue(model ask query)
    }

}